import ds/tree;
import lab9/expr;

export {
    Polynomial(sum: Tree<PolyTerm, int>);
    PolyTerm(product: Tree<string, int>);
    RationalFunction(num: Polynomial, den: Polynomial);

    simplifyRationalFunction(rationalFunc : Maybe<RationalFunction>) -> Maybe<RationalFunction>;
    cutVars(rf : RationalFunction) -> RationalFunction;
    ar2rf(e: ArExp) -> Maybe<RationalFunction>;
    rf2s(rf: RationalFunction) -> string;
}

ar2rf(e: ArExp) -> Maybe<RationalFunction> {
    applyOpRf = \operation, l, r -> {
        switch(ar2rf(l)) {
            Some(a):
                switch(ar2rf(r)) {
                    Some(b): Some(operation(a, b));
                    None(): None();
                };
            None(): None();
        };
    }

    rationalFunc = switch (e) {
        ArSum(l, r): applyOpRf(sumRationalFunctions, l, r);
        ArSub(l, r): applyOpRf(subRationalFunctions, l, r);
        ArProd(l, r): applyOpRf(multRationalFunctions, l, r);
        ArDiv(l, r): {
            switch(ar2rf(r)) {
                None(): None();
                Some(rf): {
                    if (rf.num == Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 0))) {
                        println("Division by zero!");
                        None();
                    } else {
                        applyOpRf(divRationalFunctions, l, r);
                    }
                }
            }
        }
        ArNeg(expr): {
            switch(ar2rf(expr)) {
                Some(posRf): Some(changeSignRationalFunction(posRf));
                None(): None();
            }  
        };
        ArInt(v): 
            Some(RationalFunction(
            Polynomial(setTree(makeTree(), PolyTerm(makeTree()), v)),
            Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 1))
        ));
        ArVar(name): {
            Some(RationalFunction(
            Polynomial(setTree(makeTree(), PolyTerm(setTree(makeTree(), name, 1)), 1)),
            Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 1))));
        };
    }
    simplifyRationalFunction(rationalFunc);
}

simplifyRationalFunction(rationalFunc : Maybe<RationalFunction>) -> Maybe<RationalFunction> {
    switch(rationalFunc) {
        None(): None();
        Some(rf): {
            switch(filterPolynomial(rf.den)) {
                None(): {
                    println("Division by zero!");
                    None();
                };
                Some(den): {
                    num = switch(filterPolynomial(rf.num)) {
                        None(): Polynomial(makeTree());
                        Some(v): v;
                    }
                    simplifiedZerosRf = RationalFunction(num, den);
                    if (simplifiedZerosRf.num == Polynomial(makeTree())) {
                        Some(RationalFunction(
                        Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 0)),
                        Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 1))));
                    } else {
                        polyGCD = gcd(coefGCD(simplifiedZerosRf.num), coefGCD(simplifiedZerosRf.den));
                        simplifiedGCDRf = divRationalFunctionByInt(simplifiedZerosRf, polyGCD);
                        numGCD = coefGCD(simplifiedGCDRf.num);
                        simplifiedGCDRf_num = divPolynomialByInt(simplifiedGCDRf.num, numGCD);

                        if (simplifiedGCDRf_num == simplifiedGCDRf.den) {
                            Some(RationalFunction(
                            Polynomial(setTree(makeTree(), PolyTerm(makeTree()), numGCD)),
                            Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 1))));
                        } else {
                            Some(simplifiedGCDRf);
                        }
                    }
                }    
            }
        }
    }
}


// сокращение полиномов на общие переменные
cutVars(rf : RationalFunction) -> RationalFunction {
    cuttedRF = fold(getVariables(rf.num), rf, \acc, var -> {
        if (checkPolynomialForVar(rf.num, var)
            && checkPolynomialForVar(rf.den, var)) {
                simplifiedDivByVar_num = divPolynomialByVar(rf.num, var);
                simplifiedDivByVar_den = divPolynomialByVar(rf.den, var);
                RationalFunction(simplifiedDivByVar_num, simplifiedDivByVar_den);
            } else {
                acc;
            }
    });

    if (cuttedRF == rf) {
        rf;
    } else {
        cutVars(cuttedRF);
    }
}

// снижение степени указанной переменной во всех членах полинома на 1
divPolynomialByVar(p: Polynomial, var: string) {
    Polynomial(foldTree(p.sum, makeTree(), \term, v, acc -> {
        switch (lookupTree(term.product, var)) {
            Some(value): {
                // добавляет term с уменьшенной степенью переменной на 1 
                // удаляет переменную, если степень 0
                setTree(acc, PolyTerm(filterTree(setTree(term.product, var, value - 1),
                    \k, val -> val != 0 )), v);
            }
            None(): setTree(acc,  PolyTerm(term.product), v);
        }
    }));
}

// проверяет, что в полиноме все члены содержат указанную переменную
checkPolynomialForVar(p: Polynomial, var: string) -> bool {
    arr = [0, 0];

    iterVarsCounter = foldTree(p.sum, arr, \term, v, acc -> {
        if (containsKeyTree(term.product, var)) {
            switch (lookupTree(term.product, var)) {
                Some(value): {
                    if (value > 0) {
                        [acc[0] + 1, acc[1] + 1];
                    } else {
                        [acc[0] + 1, acc[1]];
                    }
                }
                None(): {
                    [acc[0] + 1, acc[1]];
                }
            }
        } else {
            [acc[0] + 1, acc[1]];
        }
    });
    (iterVarsCounter[0] == iterVarsCounter[1]);
}

// добавить уникальную переменную к массиву переменных
getVarFromTerm(e: PolyTerm, varArray: [string]) -> [string] {
    foldTree(e.product, varArray, \k, v, acc -> {
        if(findi(acc, \var -> (var == k)) == None()) {
            concat(acc, [k]);
        } else {
            acc;
        }
    });
}

// получение массива переменных, например ["x", "y"]
getVariables(p: Polynomial) -> [string] {
    foldTree(p.sum, [], \k, v, acc -> {
        getVarFromTerm(k, acc);
    });
}

filterPolynomial(p: Polynomial) -> Maybe<Polynomial> {
    if (isEmptyTree(filterTree(p.sum, \k, v -> v != 0))) {
        None();
    } else {
        Some(Polynomial(filterTree(p.sum, \k, v -> v != 0)));
    }
}

coefGCD(p: Polynomial) -> int {
    initial = getTreeValues(p.sum)[0];
    foldTree(p.sum, initial, \k, v, acc -> gcd(acc, v));
}

divPolynomialByInt(p: Polynomial, c: int) -> Polynomial {
    Polynomial(mapTree(p.sum, \v -> v / c ));
}

divRationalFunctionByInt(rf: RationalFunction, c: int) -> RationalFunction {
    RationalFunction(divPolynomialByInt(rf.num, c), divPolynomialByInt(rf.den, c));
}

sumRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
    RationalFunction(sumPolynomials(multPolynomials(l.num, r.den), multPolynomials(r.num, l.den)), 
    multPolynomials(l.den, r.den));
}

subRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
    RationalFunction(sumPolynomials(multPolynomials(l.num, r.den),
        changeSignPolynomial(multPolynomials(r.num, l.den))), 
        multPolynomials(l.den, r.den))
}

multRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
    RationalFunction(multPolynomials(l.num, r.num), multPolynomials(l.den, r.den));
}

divRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
    RationalFunction(multPolynomials(l.num, r.den), multPolynomials(l.den, r.num));
}

changeSignRationalFunction(rf: RationalFunction) -> RationalFunction {
    RationalFunction(changeSignPolynomial(rf.num), rf.den);
}

changeSignPolynomial(p: Polynomial) -> Polynomial {
    Polynomial(mapTree(p.sum, \coef -> -coef));
}

multPolyTerms(l: PolyTerm, r: PolyTerm) -> PolyTerm {
    PolyTerm(mergeTreeCustom(l.product, r.product, \k, lv, rv -> rv + lv));
}

sumPolynomials(l: Polynomial, r: Polynomial) {
    Polynomial(mergeTreeCustom(l.sum, r.sum, \k, lv, rv -> lv + rv));
}

multPolynomials(l: Polynomial, r: Polynomial) {
    Polynomial(foldTree(l.sum, makeTree(), \lPolyTerm, lCoef, acc -> {
        foldTree(r.sum, acc, \rPolyTerm, rCoef, bcc -> {
            term = multPolyTerms(lPolyTerm, rPolyTerm);
            switch(lookupTree(bcc, term)) {
                Some(coef): setTree(bcc, term, coef + (lCoef * rCoef));
                None(): setTree(bcc, term, (lCoef * rCoef));
            }     
        })
    }))
}

p2s (e: Polynomial) -> string {
    trim2(concatStrings(foldTree(e.sum, [], \k, v, acc -> {
        if (v > 0) {
            concat(acc, [" + " + i2s(v) + polyTerm2s(k)])
        } else {
            concat(acc, [" - " + i2s(-v) + polyTerm2s(k)])
        }
    })), " + ");
}

polyTerm2s (e: PolyTerm) -> string {
    concatStrings(foldTree(e.product, [], \k, v, acc -> {
        if (v > 1) { 
            concat(acc, [k + "^" + i2s(v)]); 
        } else {
            concat(acc, [k]); 
        }
    }));
}

rf2s(rf: RationalFunction) -> string {
    if(rf.den == Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 1))) {
        if (rf.num == Polynomial(setTree(makeTree(), PolyTerm(makeTree()), 0))) {
            "0";
        } else {
            p2s(rf.num);
        }
    } else {
        "(" + p2s(rf.num) + ") / (" + p2s(rf.den) + ")";
    }
}