import math/math;
import string;

export {
    Fraction(num: int, den: int);
    fractProd(l: Fraction, r: Fraction) -> Fraction;
    fractDiv(l: Fraction, r: Fraction) -> Fraction;
    fractSum(l: Fraction, r: Fraction) -> Fraction;
    fractSub(l: Fraction, r: Fraction) -> Fraction;
    fractNeg(r: Fraction) -> Fraction;
    
    fract2s(e: Fraction) -> string;
}

fractProd(l: Fraction, r: Fraction) -> Fraction {
    gcdVal = gcd(l.num * r.num, l.den * r.den);
    Fraction((l.num * r.num) / gcdVal, (l.den * r.den) / gcdVal);
}

fractDiv(l: Fraction, r: Fraction) -> Fraction {
    gcdVal = gcd(l.num * r.den, l.den * r.num);
    Fraction((l.num * r.den) / gcdVal, (l.den * r.num) / gcdVal);
}

fractSum(l: Fraction, r: Fraction) -> Fraction{
    if(l.den == r.den) {
        Fraction(l.num + r.num, l.den);
    } else {
        numerator = l.num * r.den + r.num * l.den;
        denumerator = l.den * r.den;
        gcdVal = gcd(numerator, denumerator);
        Fraction(numerator / gcdVal, denumerator / gcdVal);
    }
}

fractSub(l: Fraction, r: Fraction) -> Fraction{
    fractSum(l, fractNeg(r));

    /*if(l.den == r.den){
        Fraction(l.num - r.num, l.den);
    } else {
        gcdVal = gcd(l.num * r.den - r.num * l.den, l.den * r.den);
        Fraction((l.num * r.den - r.num * l.den)/gcdVal, (l.den * r.den)/gcdVal);
    }*/
}

fractNeg(v: Fraction) -> Fraction{
    Fraction(-v.num, v.den);
}

fract2s(v:Fraction) -> string{
    if (v.den == 1){
        i2s(v.num);
    } else {
        if (v.den < 0) {
            i2s(-v.num) + "/" + i2s(-v.den);
        } else {
            i2s(v.num) + "/" + i2s(v.den);
        }
    }
}