import lab7/expr;
import lab7/derivative;
import lab7/polynomial;

ar2s(expr: ArExp) -> string {
    switch (expr) {
        ArSum(l, r): {
            "(" + ar2s(l) + " + " + ar2s(r) + ")";
        }
        ArSub(l, r): {
            "(" + ar2s(l) + " - " + ar2s(r) + ")";
        }
        ArProd(l, r): {
            "(" + ar2s(l) + " * " + ar2s(r) + ")";
        }
        ArDiv(l, r): {
            "(" + ar2s(l) + " / " + ar2s(r) + ")";
        }
        ArNeg(v): {
            "(-" + ar2s(v) + ")";
        }
        ArInt(v): i2s(v);
        ArVar(v): v;
    }
}



main() {
    s = "(4/(-6))";
    vars = setTree(makeTree(), "a", 8) |> (\t -> setTree(t, "c", 10));
    switch(ar2i(s2ar(s), vars)) {
        Some(v): println(fract2s(v));
        None(): println("None");
    }

    expr = "(1/0)";
    println(ar2s(simplify(derive(s2ar(expr), ArVar("x")))));
    
    poly = "((((a + 1) / (7 * c)) * ((7 + (6 * c)) / x)) / ((3 * (a + 1)) / (x * x)))";
    println(rf2s(cutVars(ar2rf(s2ar(poly)))));

    quit(0);
}